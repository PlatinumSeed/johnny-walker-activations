/* ::Johnny Walker Red Sales Actition App  */
/* ----------------------------------------------------------- */

//Serialize form input
$.fn.serializeFormJSON = function() {
   var o = {};
   var a = this.serializeArray();
   $.each(a, function() {
       if (o[this.name]) {
           if (!o[this.name].push) {
               o[this.name] = [o[this.name]];
           }
           o[this.name].push(this.value || '');
       } else {
           o[this.name] = this.value || '';
       }
   });
   return o;
};

//Randomize elements
(function($) {
$.fn.randomize = function(childElem) {
  return this.each(function() {
      var $this = $(this);
      var elems = $this.children(childElem);

      elems.sort(function() { return (Math.round(Math.random())-0.5); });  

      $this.detach(childElem);  

      for(var i=0; i < elems.length; i++)
        $this.append(elems[i]);      

  });    
}
})(jQuery);

//Init the database
var database = {
    database: null,
    name: 'JohnnyWalkerRedActivation',
    version: '1.0',
    displayName: 'Johnny Walker Red Activations',
    size: 200000,
    init: function() {
        var _this = window.openDatabase(this.name, this.version, this.displayName, this.size);
        return _this;
    }
};
var db = database.init();

function activation(data) {
     a = typeof a !== 'undefined' ? a : 42;
    this.id = null;
    this.venue = typeof data.venue !== 'undefined' ? data.venue : null;
    if (typeof data.date !== 'undefined' && typeof data.time !== 'undefined') {
        this.date_time = data.date+' '+data.time;
    }
    else {
        this.date_time = null;
    }
    this.additional_comments = typeof data.additional_comments !== 'undefined' ? data.additional_comments : null;
    this.attendance  = 0
    this.game1_total = 0;
    this.game1_wins  = 0;
    this.game2_total = 0;
    this.game2_wins  = 0;
    this.game3_total = 0;
    this.game3_wins  = 0;
};

function contact(data, activation_id) {
    this.id = null;
    this.first_name       = typeof data.first_name !== 'undefined' ? data.first_name : null;
    this.last_name        = typeof data.last_name !== 'undefined' ? data.last_name : null;
    this.email            = typeof data.email !== 'undefined' ? data.email : null;
    this.mobile_number    = typeof data.mobile_number !== 'undefined' ? data.mobile_number : null;
    this.gender           = typeof data.gender !== 'undefined' ? data.gender : null;
    this.twitter_handle   = typeof data.twitter_handle !== 'undefined' ? data.twitter_handle : null;
    this.newsletter_signup = typeof data.newsletter_signup !== 'undefined' ? data.newsletter_signup : null;
    this.activation_id    = typeof activation_id !== 'undefined' ? activation_id : null;
};


var app = {
    //Variables
    //Game 2 answer records
    answersCorrect: 0,
    answersIncorrect: 0,
    game2Active: true,
    //Modals
    currentContact: [],
    //API
    api_url: 'http://jwserver.dev/api/v1/',
    // Application Constructor
    initialize: function() {
        this.bindEvents();

        //Reset past activation
        this.initActivation();
        
        //Custom Checkboxes
        $('input').iCheck();

        //Game 1 Sortable
        this.initSortable();

        //Game 3 answer selection
        this.answerSelect();

        //Init the DB
        this.createDB();
        
    },
    // Bind Event Listeners
    //
    // Bind any events that are required on startup. Common events are:
    // 'load', 'deviceready', 'offline', and 'online'.
    bindEvents: function() {
        document.addEventListener('deviceready', this.onDeviceReady, false);

        window.addEventListener('load', function() {
            FastClick.attach(document.body);
        }, false);

        //Bind event on tapping action item
        that = this;
        $(document.body).on('click', '.action', function(event) {
            event.preventDefault();
            event.stopPropagation();
            $('form input, form textarea').blur();
            that[$(this).data('action')](event);
        });

        //Page change event
        $(document.body).on('pageChange', function(event, page){
            that.onPageChange(event, page);
        });

        //Form label effects
        $('form').on('focus', 'input, textarea', this.focusInputActive);
        $('form').on('blur', 'input, textarea', this.blurInputActive);

        //Game2 option selections
        $(document.body).on('click tap', '.game2_checkboxes li.open', this.submitGame2);

        //Game3 slider events
        $( '.cycle-slideshow' ).on( 'cycle-before', function( event, optionHash, outgoingSlideEl, incomingSlideEl, forwardFlag ) {
            $('#advance').hide(); 
        });

        //Hide splash
        $('.splash img').on('tap click', function(){
            EffecktPageTransitions.transitionPage( 'activation', 'slide-from-top', 'slide-to-bottom', 'endGame' );
            $('.splash').fadeOut(400);
        })
    },
    // deviceready Event Handler
    //
    // The scope of 'this' is the event. In order to call the 'receivedEvent'
    // function, we must explicitly call 'app.receivedEvent(...);'
    onDeviceReady: function() {
        
    },

    //Database Section
    //----------------------------------------------------------------------------------------------------------------------
    createDB: function(tx) {
        db.transaction(this.structureDB, this.errorDB, this.successDB);
    },
    destroyDB: function() {
        db.transaction(function (tx) {
            tx.executeSql('DROP TABLE activations');
            tx.executeSql('DROP TABLE contacts');
        }, this.errorDB, this.successDB);
    },
    structureDB: function(tx) {
        tx.executeSql('CREATE TABLE IF NOT EXISTS activations( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, venue TEXT NOT NULL, date_time TEXT NOT NULL, attendance INTEGER, additional_comments TEXT, game1_total INTEGER, game1_wins INTEGER, game2_total INTEGER, game2_wins INTEGER, game3_total INTEGER,  game3_wins INTEGER)');
        tx.executeSql('CREATE TABLE IF NOT EXISTS contacts ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, mobile_number TEXT NOT NULL, gender TEXT NOT NULL, twitter_handle TEXT, newsletter_signup TEXT, activation_id INTEGER, game_result TEXT )');
    },
    createActivation: function(event){
        //Validation
        $(event.currentTarget).parents('form').parsley('addListener', {
            onFieldError: function (elem) {
                $(elem).parents('label').addClass('errorState');
                return false;
            },
            onFieldSuccess: function(elem) {
                $(elem).parents('label').removeClass('errorState');
            }
        });
        if(!$(event.currentTarget).parents('form').parsley('validate')) {
            return false;
        }
        var data = $(event.currentTarget).parents('form').serializeFormJSON();
        this.currentActivation = new activation(data);
        //Save in local DB
        this.storeActivation(this.currentActivation);
        //Set venue of activation on front end
        $('.activation_venue').html(this.currentActivation.venue);
        $('.activation_date').html(this.currentActivation.date_time);
        //Set activation state to open
        this.currentActivation.activation_open = true;
        //Go to activation management page
        EffecktPageTransitions.transitionPage( 'activation', 'slide-from-right', 'slide-to-left' );
    },
    storeActivation: function() {
        var that = this;
        db.transaction(function(tx){
            tx.executeSql(
                'INSERT INTO activations (venue, date_time, attendance, game1_total, game1_wins, game2_total, game2_wins, game3_total, game3_wins) VALUES ("'+that.currentActivation.venue+'", "'+that.currentActivation.date_time+'", "0", "0", "0", "0", "0", "0", "0")',
                [],
                function(tx, results) {
                    that.currentActivation.id = results.insertId;
                }
            );
        }, that.errorDB, function(){
            that.resetform('new_activation');
        });
    },
    createContact: function(event) {
        var games = ['game_1', 'game_2', 'game_3'];

        $(event.currentTarget).parents('form').parsley('addListener', {
            onFieldError: function (elem) {
                $(elem).parents('label').addClass('errorState');
                return false;
            },
            onFieldSuccess: function(elem) {
                $(elem).parents('label').removeClass('errorState');
            }
        });
        if(!$(event.currentTarget).parents('form').parsley('validate')) {
            return false;
        }
        var data = $(event.currentTarget).parents('form').serializeFormJSON();
        this.currentContact = new contact(data, this.currentActivation.id);
        //Save to local DB
        this.storeContact();
        //Go to a random game
        randomGameKey = Math.floor(Math.random()*games.length);
        EffecktPageTransitions.transitionPage( games[randomGameKey], 'slide-from-bottom', 'slide-to-top', 'initGame'+(randomGameKey+1) );
    },
    storeContact: function() {
        var that = this;
        db.transaction(function(tx){
            tx.executeSql(
                'INSERT INTO contacts (first_name, last_name, email, mobile_number, gender, twitter_handle, newsletter_signup, activation_id) VALUES ("'+that.currentContact.first_name+'", "'+that.currentContact.last_name+'", "'+that.currentContact.email+'", "'+that.currentContact.mobile_number+'", "'+that.currentContact.gender+'", "'+that.currentContact.twitter_handle+'", "'+that.currentContact.newsletter_signup+'", "'+that.currentContact.activation_id+'")',
                [],
                function(tx, results) {
                    that.currentContact.id = results.insertId;
                }
            );
        }, that.errorDB, that.resetform('details'));
    },
    updateGameResults: function(game_number) {
        game_total = this.currentActivation['game'+game_number+'_total'];
        game_wins = this.currentActivation['game'+game_number+'_wins'];

        sqlStatement = 'UPDATE activations SET game'+game_number+'_total="'+game_total+'", game'+game_number+'_wins="'+game_wins+'" WHERE id='+this.currentActivation.id;
        
        db.transaction(function(tx){
            tx.executeSql(sqlStatement);
        }, this.errorDB, this.resetGame(game_number));
    },
    endActivation: function(event) {
        var that = this;

        $(event.currentTarget).parents('form').parsley('addListener', {
            onFieldError: function (elem) {
                $(elem).parents('label').addClass('errorState');
                return false;
            },
            onFieldSuccess: function(elem) {
                $(elem).parents('label').removeClass('errorState');
            }
        });
        if(!$(event.currentTarget).parents('form').parsley('validate')) {
            return false;
        }

        var data = $(event.currentTarget).parents('form').serializeFormJSON(),
            sqlStatement  = 'UPDATE activations SET attendance="'+data.attendance+'", additional_comments="'+data.additional_comments+'" WHERE id='+this.currentActivation.id

        db.transaction(function(tx){
            tx.executeSql(sqlStatement);
        }, that.errorDB, function(){
            that.initActivation();
            //Unset current activation
            delete that.currentActivation;
            EffecktPageTransitions.transitionPage( 'new_activation', 'scale-up-from-behind', 'scale-up-to-front' );
            that.resetform('end_activation');
        });
    },
    getTable: function(table, sync) {
        table = typeof table !== 'object' ? table : 'activations';
        sync = typeof sync !== 'undefined' ? sync : false;

        var sqlStatement = 'SELECT * FROM ' + table,
            that = this;

        db.transaction(function (tx) {
            tx.executeSql(sqlStatement, [], function (tx, results) {
                var len = results.rows.length, i;

                if (len > 0) {
                    if (sync) {
                        that.serverSync(table, results);
                    }
                    else {
                        that.buildResultsTable(results);
                        EffecktPageTransitions.transitionPage( 'activation_reports', 'slide-from-bottom', 'slide-to-top' );
                    }
                    
                }
                else {
                    alert('There are currently no activations');
                }
                
            });
        });
    },
    errorDB: function(err) {
        alert("Error processing SQL: "+err.message);
    },
    successDB: function() {
        console.log('db success');
    },

    //Data Sync
    //----------------------------------------------------------------------------------------------------------------------
    dataSync: function() {
        $('.loading').show();
        //this.getTable('activations', true);
        this.getTable('contacts', true);
    },
    serverSync: function(table, data) {
        var that = this,
            syncSuccess = true,
            processItemsDeferred = [];

        for(var i = 0; i < data.rows.length; i++){
            if (table == 'activations') {
                storeData = {
                    id: data.rows.item(i).id,
                    venue: data.rows.item(i).venue,
                    additional_comments : data.rows.item(i).additional_comments,
                    attendance  : data.rows.item(i).attendance,
                    game1_total : data.rows.item(i).game1_total,
                    game1_wins  : data.rows.item(i).game1_wins,
                    game2_total : data.rows.item(i).game2_total,
                    game2_wins  : data.rows.item(i).game2_wins,
                    game3_total : data.rows.item(i).game3_total,
                    game3_wins  : data.rows.item(i).game3_wins
                }
            }
            else if (table == 'contacts') {
                storeData = {
                    id               :data.rows.item(i).id,
                    first_name       :data.rows.item(i).first_name,
                    last_name        :data.rows.item(i).last_name,
                    email            :data.rows.item(i).email,
                    mobile_number    :data.rows.item(i).mobile_number,
                    gender           :data.rows.item(i).gender,
                    twitter_handle   :data.rows.item(i).twitter_handle,
                    newsletter_signup :data.rows.item(i).newsletter_signup,
                    activation_id    :data.rows.item(i).activation_id
                }
            };
            processItemsDeferred.push(that.syncItem(table, storeData));
        }
        $.when.apply($, processItemsDeferred).done(function(value){
            that.everythingDone(value);
        });
    },
    syncItem: function(table, data) {
        var syncing = $.Deferred();
        $.ajax({
            type: 'post',
            url: that.api_url+table,
            data: data,
            processData: false,
            beforeSend: function (jqXHR, settings) {
                jqXHR.activation = settings.data;
                settings.data = jQuery.param(settings.data, false);
            },
            success: function(result, textStatus, jqXHR) {
                syncing.resolve('Your activation data has been successfully synced with the remote server');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                syncing.reject('There was a problem syncing your data, please check your internet connection and try again');
            }
        });
        return syncing.promise();
    },
    everythingDone: function(value) {
        $('.loading').hide();
        alert(value);
    },
    
    //Housekeeping
    //----------------------------------------------------------------------------------------------------------------------
    resetform: function(form_class) { //Reset the form (specified by form_class) values
        $("."+form_class+" input").each(function(){
            $(this).val('');
            if ($(this).attr('type') == 'checkbox') {
                $(this).iCheck('uncheck');
            }
        })
    },
    resetGame: function(game_number) { //Reset game input
        if (game_number == 1) {
            $('.sortable').randomize('.sortable_item');
        }
        else if (game_number == 2) {
            $('.game2_checkboxes li').each(function(){
                $(this).addClass('open').removeClass('checked')
            });
            this.answersCorrect = 0;
            this.answersIncorrect = 0;
            this.game2Active = true;
            $('.submit_game2').hide();
        }
        else if (game_number == 3) {
            $('.question_options .option').each(function(){
                $(this).removeClass('selected');
            })
            $('.game3_next_question, .game3_submit').hide();
            $('.cycle-slideshow').cycle('goto', 0);
        }
        else {
            return false;
        }
    },

    //UI section
    //----------------------------------------------------------------------------------------------------------------------
    initActivation: function() {
        $(document.body).trigger('pageChange', 'new_activation');

        var currentdate = new Date();
        var date = currentdate.getFullYear()+'-'+('0' + (currentdate.getMonth()+1)).slice(-2)+'-'+('0' + currentdate.getDate()).slice(-2);
        var time = ('0' + currentdate.getHours()).slice(-2)+':'+('0' + currentdate.getMinutes()).slice(-2);
        $('input[name="date"]').val(date);
        $('input[name="time"]').val(time);
    },
    //Open Menu
    openMenu: function(event) {
        $('main').addClass('open');
        $('.menu_open').hide();
    },
    //Close Menu
    closeMenu: function(event) {
        $('main').removeClass('open');
        $('.menu_open').show();
    },
    //Form input label effect
    blurInputActive: function(event) {
        if(!$(this).val() || $(this).val() == '@') {
            $(this).parents('label').removeClass('active');
        }
    },
    focusInputActive: function(event) {
        if(!$(this).val() || $(this).val() == '@') {
            $(this).parents('label').addClass('active');
        }
    },
    //Set the checkbox to checked when parent box is tapped
    setCheck: function(event) {
        var target = event.target;

        if (target.localName == 'div') {
            $('input', target).iCheck('toggle');
        }
        else if(target.localName == 'label') {
            $(target).siblings('div').children('input').iCheck('toggle');
        }
        
    },
    //Initialize sortable for game 1
    initSortable: function() {
        $(".sortable").sortable({
            axis: 'x',
            stop: function( event, ui ) {
                $('.sortable_item').each(function(index, object) {
                    $('.order', this).html(index+1);
                });
            }
        });
    },
    answerSelect: function() {
        $('.option').on('click tap', function(){
            $(this).siblings().removeClass('selected');
            $(this).addClass('selected');
            if ($(this).parents('.slide').hasClass('question4')) {
                $('.game3_submit').show();
            }
            else {
                $('#advance').fadeIn(400);
            }
        });
    },
    buildResultsTable: function(activations) {
        var len = activations.rows.length,
            activations_html = '';

        for (i = 0; i < len; i++) {
            total_entries = activations.rows.item(i).game1_total + activations.rows.item(i).game2_total + activations.rows.item(i).game3_total;
            total_wins = activations.rows.item(i).game1_wins + activations.rows.item(i).game2_wins + activations.rows.item(i).game3_wins;
            activations_html += '<div class="table_row"><div class="table_row__item">'+activations.rows.item(i).venue+'</div><div class="table_row__item">'+activations.rows.item(i).attendance+'</div><div class="table_row__item">'+total_entries+'</div><div class="table_row__item">'+activations.rows.item(i).game1_wins+'/'+activations.rows.item(i).game1_total+'</div><div class="table_row__item">'+activations.rows.item(i).game2_wins+'/'+activations.rows.item(i).game2_total+'</div><div class="table_row__item">'+activations.rows.item(i).game3_wins+'/'+activations.rows.item(i).game3_total+'</div><div class="table_row__item">'+total_wins+'/'+total_entries+'</div></div>';
        }

        $('.table_body').html(activations_html);
    },
    openTimePicker: function(event) {
        event.stopPropagation();
        var currentField = event.target;
        var opts = {};
        var minVal = 0;
        var maxVal = 0;

        var myNewDate = Date.parse(currentField.val()) || new Date();
        if(typeof myNewDate === "number") {
            myNewDate = new Date (myNewDate);
        }

        window.plugins.datePicker.show({
            date : myNewDate,
            mode : 'date',
            minDate: Date.parse(minVal),
            maxDate: Date.parse(maxVal)
        }, function(returnDate) {
            if(returnDate !== "") {
                var newDate = new Date(returnDate);
                currentField.val(getFormattedDate(newDate));
            }
            currentField.blur();
        });
    },
    onPageChange: function(event, page) {
        //Hide sync button if activation is active
        if (typeof this.currentActivation === 'undefined') {
            $('.menu_sync').show()
        }
        else {
            $('.menu_sync').hide();
        };
        //Hide menu for client facing pages
        if (page == 'new_activation' || page =='activation') {
            $('.menu_open').show();
        }
        else {
            $('.menu_open').hide();
        };
    },

    //Game stuff
    //----------------------------------------------------------------------------------------------------------------------
    submitGame1: function() {
        var sortedOrder = $( ".sortable" ).sortable( "toArray" ),
            correctOrder = ["ice", "whiskey", "gingerbeer"];
            win = true;

        for(var i = correctOrder.length; i--;) {
            if(correctOrder[i] !== sortedOrder[i]) {
                win =  false;
            }
        }
        if (win) {
            //You won the game
            console.log('Done with game 1, you won');
            this.currentActivation.game1_total++;
            this.currentActivation.game1_wins++;
            $('.splash.win').fadeIn();
        }
        else {
            //You loose
            console.log('Done with game 1, you loose');
            this.currentActivation.game1_total++;
            $('.splash.loose').fadeIn();
        };
        this.updateGameResults('1');
    },
    submitGame2: function() {
        if (that.game2Active) {
            if ($(this).hasClass('correct')) {
                $(this).addClass('checked').removeClass('open');
                that.answersCorrect++;
                if (that.answersCorrect == 3) {
                    //Win
                    that.game2Active = false;
                    console.log('Done with game 2, you won');
                    that.currentActivation.game2_total++;
                    that.currentActivation.game2_wins++;
                    that.updateGameResults('2');
                    $('.splash.win').fadeIn();
                    //$('.submit_game2').data('action', 'game2Win').show();
                }
            }
            if ($(this).hasClass('incorrect')) {
                $(this).addClass('checked').removeClass('open');
                that.answersIncorrect++
                if (that.answersIncorrect == 2) {
                    //Lose
                    that.game2Active = false;
                    console.log('Done with game 2, you loose');
                    that.currentActivation.game2_total++;
                    that.updateGameResults('2');
                    $('.splash.loose').fadeIn();
                    //$('.submit_game2').data('action', 'game2Loose').show();
                }
            }   
        }
    },
    submitGame3: function() {
        var correctAnswers = ['C', 'C', 'C', 'C']
        win = true;
        for (i = 1; i < 5; i++) { 
             if ($('.question'+i+' .selected').data('option') != correctAnswers[i - 1]) {
                win = false;
            };
        }
        if (win) {
            //You won the game
            console.log('Done with game 3, you won');
            this.currentActivation.game3_total++;
            this.currentActivation.game3_wins++;
            $('.splash.win').fadeIn();
        }
        else {
            //You loose
            console.log('Done with game 3, you loose');
            this.currentActivation.game3_total++;
            $('.splash.loose').fadeIn();
        };
        this.updateGameResults('3');
    }
};
